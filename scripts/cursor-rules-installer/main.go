package main

import (
	"flag"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

var ruleTemplates = map[string]string{
	"go":           "https://raw.githubusercontent.com/PatrickJS/awesome-cursorrules/main/rules/go/cursorrules",
	"vue-frontend": "https://raw.githubusercontent.com/PatrickJS/awesome-cursorrules/main/rules/vue/cursorrules",
}

var specialCommands = map[string]string{
	"supabase": "npx shadcn@latest add https://supabase.com/ui/r/ai-editor-rules.json",
}

func main() {
	var (
		projectType = flag.String("type", "go", "–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (go, vue, supabase)")
		customURL   = flag.String("url", "", "–ö–∞—Å—Ç–æ–º–Ω—ã–π URL –¥–ª—è .cursorrules —Ñ–∞–π–ª–∞")
		directory   = flag.String("dir", ".", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ .cursorrules")
		list        = flag.Bool("list", false, "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤")
	)
	flag.Parse()

	if *list {
		fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:")
		for projectType := range ruleTemplates {
			fmt.Printf("  - %s\n", projectType)
		}
		fmt.Println("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
		for projectType := range specialCommands {
			fmt.Printf("  - %s (–≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É)\n", projectType)
		}
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if info, err := os.Stat(*directory); err != nil || !info.IsDir() {
		log.Fatalf("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", *directory)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
	if command, exists := specialCommands[strings.ToLower(*projectType)]; exists {
		fmt.Printf("üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è %s...\n", *projectType)
		if err := executeCommand(command, *directory); err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: %v", err)
		}
		fmt.Printf("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ %s\n", *projectType)
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	var rulesURL string
	if *customURL != "" {
		rulesURL = *customURL
	} else {
		var exists bool
		rulesURL, exists = ruleTemplates[strings.ToLower(*projectType)]
		if !exists {
			log.Fatalf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: %s. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤", *projectType)
		}
	}

	// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .cursorrules
	rulesPath := filepath.Join(*directory, ".cursorrules")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
	if _, err := os.Stat(rulesPath); err == nil {
		fmt.Printf("–§–∞–π–ª .cursorrules —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ %s\n", *directory)
		fmt.Print("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
		var response string
		fmt.Scanln(&response)
		if strings.ToLower(response) != "y" && strings.ToLower(response) != "yes" {
			fmt.Println("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
			return
		}
	}

	// –°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º .cursorrules
	if err := downloadAndInstallRules(rulesURL, rulesPath); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cursor rules: %v", err)
	}

	fmt.Printf("‚úÖ Cursor rules —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ %s\n", rulesPath)
	fmt.Printf("üìÅ –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: %s\n", *projectType)
	if *customURL != "" {
		fmt.Printf("üîó URL: %s\n", *customURL)
	}
}

func downloadAndInstallRules(url, filePath string) error {
	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	resp, err := http.Get(url)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP: %s", resp.Status)
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	_, err = io.Copy(file, resp.Body)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %v", err)
	}

	return nil
}

func executeCommand(command, directory string) error {
	// –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
	parts := strings.Fields(command)
	if len(parts) == 0 {
		return fmt.Errorf("–ø—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
	cmd := exec.Command(parts[0], parts[1:]...)
	cmd.Dir = directory
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
	return cmd.Run()
}
